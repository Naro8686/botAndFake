<?php

namespace App\Telegram\Commands;

use App\Api\SmsApi;
use App\Models\Role;
use Telegram\Bot\Actions;
use Telegram\Bot\Exceptions\TelegramSDKException;


class GetSmsBalanceCommand extends BaseCommand
{
    /**
     * @var string Command Name
     */
    protected $name = "getSmsBalance";

    /**
     * @var string Command Description
     */
    protected $description = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Å—å —Å–º—Å";
    protected $permissionName = Role::ADMIN;

    /**
     * @inheritdoc
     */
    public function handle()
    {
        $user = $this->getUser();
        $user->deleteDialog();
        $this->replyWithChatAction(['action' => Actions::TYPING]);
        $update = $this->getUpdate();
        $data = SmsApi::getBalance()->getData(true);
        if (!$data['error']) $text = makeText([
            "‚òÑÔ∏è <b>–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã</b>",
            "",
            "üíµ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–º—Å : <b>{$data['count']}</b>"
        ]);
        else $text = makeText([
            "‚ùóÔ∏è <b>–û—à–∏–±–∫–∞</b>",
            "",
            "<i>{$data['msg']}</i>"
        ]);

        if ($update->isType('callback_query')) {
            $query = $update->callbackQuery;
            try {
                $this->getTelegram()->answerCallbackQuery([
                    'callback_query_id' => $query->get('id'),
                ]);
            } catch (TelegramSDKException $e) {
                $this->replyWithMessage([
                    "text" => $e->getMessage(),
                    "parse_mode" => "html",
                ]);
            }
        }
        $this->replyWithMessage([
            "text" => $text,
            "parse_mode" => "html",
        ]);
    }

}